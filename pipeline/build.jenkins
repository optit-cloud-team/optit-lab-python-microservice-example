pipeline {
    agent any
     
    stages {
        stage('Checkout') {
            steps {
                script {
                    git branch: 'main',
                        credentialsId: 'bharath',
                        url: 'https://github.com/optit-cloud-team/optit-lab-python-microservice-example.git'
                }
            }
        }

        stage('Build Images') {
            steps {
                script {
                    sh 'pwd'
                    sh 'docker ps'
                }
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Build Consumer One') {
                    steps {
                        script {
                            def consumerOneImageName = "bharathoptdocker/python-consumer-one"
                            def consumerOneDockerfilePath = "consumer_one/Dockerfile"
                            
                            // Build the Docker image
                            docker.build(consumerOneImageName, "-f ${consumerOneDockerfilePath} .")
                            
                            // Tag the Docker image
                            docker.tag(consumerOneImageName, "latest")
                        }
                    }
                }
                
                stage('Build Consumer Two') {
                    steps {
                        script {
                            def consumerTwoImageName = "bharathoptdocker/python-consumer-two"
                            def consumerTwoDockerfilePath = "consumer_two/Dockerfile"
                            
                            // Build the Docker image
                            docker.build(consumerTwoImageName, "-f ${consumerTwoDockerfilePath} .")
                            
                            // Tag the Docker image
                            docker.tag(consumerTwoImageName, "latest")
                        }
                    }
                }
                
                stage('Build Consumer Three') {
                    steps {
                        script {
                            def consumerThreeImageName = "bharathoptdocker/python-consumer-three"
                            def consumerThreeDockerfilePath = "consumer_three/Dockerfile"
                            
                            // Build the Docker image
                            docker.build(consumerThreeImageName, "-f ${consumerThreeDockerfilePath} .")
                            
                            // Tag the Docker image
                            docker.tag(consumerThreeImageName, "latest")
                        }
                    }
                }
                
                stage('Build Consumer Four') {
                    steps {
                        script {
                            def consumerFourImageName = "bharathoptdocker/python-consumer-four"
                            def consumerFourDockerfilePath = "consumer_four/Dockerfile"
                            
                            // Build the Docker image
                            docker.build(consumerFourImageName, "-f ${consumerFourDockerfilePath} .")
                            
                            // Tag the Docker image
                            docker.tag(consumerFourImageName, "latest")
                        }
                    }
                }
                
                stage('Build Producer') {
                    steps {
                        script {
                            def pythonProduceImageName = "bharathoptdocker/python-producer"
                            def pythonProduceDockerfilePath = "producer/Dockerfile"
                            
                            // Build the Docker image
                            docker.build(pythonProduceImageName, "-f ${pythonProduceDockerfilePath} .")
                            
                            // Tag the Docker image
                            docker.tag(pythonProduceImageName, "latest")
                            sh 'docker ps'
                        }
                    }
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                // Ensure Docker Compose is installed
                sh 'docker-compose --version'
                
                // Deploy the application using Docker Compose
                sh 'docker-compose -f docker-compose.yml up -d'
                sh 'docker ps'
            }
        }

        stage('Docker Publish') {
            steps {
                script {
                    // Docker login using credentials
                    withCredentials([usernamePassword(credentialsId: 'bkdockerid', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin'
                        
                        // Get the list of services from the Docker Compose file
                        def serviceList = sh(script: 'docker-compose -f docker-compose.yml config --services', returnStdout: true).trim().split('\n')

                        serviceList.each { service ->
                            if (service in ['rabbitmq', 'mysql_db']) {
                                echo "Skipping ${service} service"
                            } else {
                                // Publish Docker images for the service
                                def buildId = env.BUILD_ID
                                def imageName = "bharathoptdocker/python-${service}"
                                def imageNameWithTag = "${imageName}:${buildId}"
                                def imageNameWithLatest = "${imageName}:latest"

                                sh "docker tag ${imageName} ${imageNameWithTag}"
                                sh "docker push ${imageNameWithTag}"
                                sh "docker tag ${imageName} ${imageNameWithLatest}"
                                sh "docker push ${imageNameWithLatest}"
                            }
                        }
                    }
                }
            }
        }
    }
}
